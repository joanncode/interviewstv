name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Code Quality and Testing
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: interviews_tv_test
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
      
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: --health-cmd="redis-cli ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.2'
        extensions: pdo, pdo_mysql, redis, bcmath, gd, imagick
        coverage: xdebug

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: web/package-lock.json

    - name: Cache Composer dependencies
      uses: actions/cache@v3
      with:
        path: api/vendor
        key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
        restore-keys: ${{ runner.os }}-composer-

    - name: Install PHP dependencies
      working-directory: ./api
      run: composer install --no-progress --prefer-dist --optimize-autoloader

    - name: Install Node.js dependencies
      working-directory: ./web
      run: npm ci

    - name: Copy environment file
      run: cp .env.testing .env

    - name: Generate application key
      working-directory: ./api
      run: php artisan key:generate

    - name: Run database migrations
      working-directory: ./api
      run: php artisan migrate --force
      env:
        DB_HOST: 127.0.0.1
        DB_PORT: 3306
        DB_DATABASE: interviews_tv_test
        DB_USERNAME: root
        DB_PASSWORD: root

    - name: Run PHP tests
      working-directory: ./api
      run: vendor/bin/phpunit --coverage-clover=coverage.xml

    - name: Run PHP Code Sniffer
      working-directory: ./api
      run: vendor/bin/phpcs --standard=PSR12 src/

    - name: Run PHPStan
      working-directory: ./api
      run: vendor/bin/phpstan analyse src/ --level=5

    - name: Run JavaScript tests
      working-directory: ./web
      run: npm test -- --coverage --watchAll=false

    - name: Run ESLint
      working-directory: ./web
      run: npm run lint

    - name: Build frontend
      working-directory: ./web
      run: npm run build

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        files: ./api/coverage.xml,./web/coverage/lcov.info
        flags: unittests
        name: codecov-umbrella

  # Security Scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Run Snyk to check for vulnerabilities
      uses: snyk/actions/php@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --file=api/composer.lock

  # Build and Push Docker Images
  build:
    name: Build and Push Images
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        target: production
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop'
    environment: staging

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Deploy to ECS
      run: |
        aws ecs update-service \
          --cluster interviews-tv-staging \
          --service interviews-tv-api \
          --force-new-deployment

    - name: Wait for deployment
      run: |
        aws ecs wait services-stable \
          --cluster interviews-tv-staging \
          --services interviews-tv-api

    - name: Run smoke tests
      run: |
        curl -f https://staging-api.interviews.tv/health || exit 1

  # Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    environment: production

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Update kubeconfig
      run: aws eks update-kubeconfig --name interviews-tv-production

    - name: Deploy to Kubernetes
      run: |
        kubectl set image deployment/interviews-tv-api \
          api=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }} \
          -n interviews-tv
        
        kubectl set image deployment/interviews-tv-queue \
          queue-worker=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }} \
          -n interviews-tv
        
        kubectl set image deployment/interviews-tv-scheduler \
          scheduler=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }} \
          -n interviews-tv

    - name: Wait for rollout
      run: |
        kubectl rollout status deployment/interviews-tv-api -n interviews-tv --timeout=600s
        kubectl rollout status deployment/interviews-tv-queue -n interviews-tv --timeout=600s
        kubectl rollout status deployment/interviews-tv-scheduler -n interviews-tv --timeout=600s

    - name: Run production smoke tests
      run: |
        curl -f https://api.interviews.tv/health || exit 1
        curl -f https://interviews.tv/ || exit 1

    - name: Notify Slack
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
      if: always()

  # Performance Testing
  performance:
    name: Performance Testing
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.ref == 'refs/heads/develop'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Lighthouse CI
      uses: treosh/lighthouse-ci-action@v10
      with:
        urls: |
          https://staging.interviews.tv
          https://staging.interviews.tv/interviews
        configPath: './lighthouserc.json'
        uploadArtifacts: true
        temporaryPublicStorage: true

    - name: Run load tests with Artillery
      run: |
        npm install -g artillery
        artillery run tests/performance/load-test.yml

  # Database Migration (Production)
  migrate-production:
    name: Database Migration
    runs-on: ubuntu-latest
    needs: deploy-production
    if: github.ref == 'refs/heads/main'
    environment: production

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure kubectl
      uses: azure/setup-kubectl@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Update kubeconfig
      run: aws eks update-kubeconfig --name interviews-tv-production

    - name: Run database migrations
      run: |
        kubectl run migration-job-${{ github.run_number }} \
          --image=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }} \
          --restart=Never \
          --rm -i \
          --namespace=interviews-tv \
          -- php api/artisan migrate --force

    - name: Clear application cache
      run: |
        kubectl exec deployment/interviews-tv-api -n interviews-tv -- php api/artisan cache:clear
        kubectl exec deployment/interviews-tv-api -n interviews-tv -- php api/artisan config:clear
