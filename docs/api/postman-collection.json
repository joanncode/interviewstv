{
  "info": {
    "name": "Interviews.tv API",
    "description": "Complete API collection for Interviews.tv platform",
    "version": "1.0.0",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "auth": {
    "type": "bearer",
    "bearer": [
      {
        "key": "token",
        "value": "{{auth_token}}",
        "type": "string"
      }
    ]
  },
  "variable": [
    {
      "key": "base_url",
      "value": "https://api.interviews.tv/v1",
      "type": "string"
    },
    {
      "key": "auth_token",
      "value": "",
      "type": "string"
    },
    {
      "key": "csrf_token",
      "value": "",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "Authentication",
      "item": [
        {
          "name": "Register User",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"John Doe\",\n  \"email\": \"john@example.com\",\n  \"password\": \"SecurePass123!\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/auth/register",
              "host": ["{{base_url}}"],
              "path": ["auth", "register"]
            }
          },
          "response": []
        },
        {
          "name": "Login User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    if (response.session && response.session.session_id) {",
                  "        pm.environment.set('auth_token', response.session.session_id);",
                  "    }",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"john@example.com\",\n  \"password\": \"SecurePass123!\",\n  \"remember_me\": false\n}"
            },
            "url": {
              "raw": "{{base_url}}/auth/login",
              "host": ["{{base_url}}"],
              "path": ["auth", "login"]
            }
          },
          "response": []
        },
        {
          "name": "Logout User",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/auth/logout",
              "host": ["{{base_url}}"],
              "path": ["auth", "logout"]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "User Management",
      "item": [
        {
          "name": "Get User Profile",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/users/profile",
              "host": ["{{base_url}}"],
              "path": ["users", "profile"]
            }
          },
          "response": []
        },
        {
          "name": "Update User Profile",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"John Doe Updated\",\n  \"bio\": \"Software engineer with 5 years of experience\",\n  \"location\": \"San Francisco, CA\",\n  \"website\": \"https://johndoe.com\",\n  \"linkedin_url\": \"https://linkedin.com/in/johndoe\",\n  \"github_url\": \"https://github.com/johndoe\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/users/profile",
              "host": ["{{base_url}}"],
              "path": ["users", "profile"]
            }
          },
          "response": []
        },
        {
          "name": "Upload Avatar",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "avatar",
                  "type": "file",
                  "src": []
                }
              ]
            },
            "url": {
              "raw": "{{base_url}}/upload/avatar",
              "host": ["{{base_url}}"],
              "path": ["upload", "avatar"]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Interviews",
      "item": [
        {
          "name": "List Interviews",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/interviews?page=1&limit=20&category=technology&difficulty=intermediate",
              "host": ["{{base_url}}"],
              "path": ["interviews"],
              "query": [
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "limit",
                  "value": "20"
                },
                {
                  "key": "category",
                  "value": "technology"
                },
                {
                  "key": "difficulty",
                  "value": "intermediate"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Create Interview",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    if (response.interview && response.interview.id) {",
                  "        pm.environment.set('interview_id', response.interview.id);",
                  "    }",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"Senior JavaScript Developer Interview\",\n  \"description\": \"Comprehensive interview covering React, Node.js, and system design. This interview explores advanced JavaScript concepts, framework knowledge, and architectural thinking.\",\n  \"category\": \"technology\",\n  \"difficulty\": \"intermediate\",\n  \"tags\": [\"javascript\", \"react\", \"nodejs\", \"system-design\"],\n  \"is_public\": true\n}"
            },
            "url": {
              "raw": "{{base_url}}/interviews",
              "host": ["{{base_url}}"],
              "path": ["interviews"]
            }
          },
          "response": []
        },
        {
          "name": "Get Interview Details",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/interviews/{{interview_id}}",
              "host": ["{{base_url}}"],
              "path": ["interviews", "{{interview_id}}"]
            }
          },
          "response": []
        },
        {
          "name": "Update Interview",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"Updated Senior JavaScript Developer Interview\",\n  \"description\": \"Updated comprehensive interview covering React, Node.js, and system design\",\n  \"difficulty\": \"advanced\",\n  \"is_public\": false\n}"
            },
            "url": {
              "raw": "{{base_url}}/interviews/{{interview_id}}",
              "host": ["{{base_url}}"],
              "path": ["interviews", "{{interview_id}}"]
            }
          },
          "response": []
        },
        {
          "name": "Upload Interview Video",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "video",
                  "type": "file",
                  "src": []
                },
                {
                  "key": "interview_id",
                  "value": "{{interview_id}}",
                  "type": "text"
                }
              ]
            },
            "url": {
              "raw": "{{base_url}}/upload/video",
              "host": ["{{base_url}}"],
              "path": ["upload", "video"]
            }
          },
          "response": []
        },
        {
          "name": "Delete Interview",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}/interviews/{{interview_id}}",
              "host": ["{{base_url}}"],
              "path": ["interviews", "{{interview_id}}"]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Notifications",
      "item": [
        {
          "name": "Get Notifications",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/notifications?page=1&limit=10&unread_only=true",
              "host": ["{{base_url}}"],
              "path": ["notifications"],
              "query": [
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "limit",
                  "value": "10"
                },
                {
                  "key": "unread_only",
                  "value": "true"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Mark Notification as Read",
          "request": {
            "method": "PUT",
            "header": [],
            "url": {
              "raw": "{{base_url}}/notifications/1/read",
              "host": ["{{base_url}}"],
              "path": ["notifications", "1", "read"]
            }
          },
          "response": []
        },
        {
          "name": "Mark All Notifications as Read",
          "request": {
            "method": "PUT",
            "header": [],
            "url": {
              "raw": "{{base_url}}/notifications/mark-all-read",
              "host": ["{{base_url}}"],
              "path": ["notifications", "mark-all-read"]
            }
          },
          "response": []
        }
      ]
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Add CSRF token if available",
          "const csrfToken = pm.environment.get('csrf_token');",
          "if (csrfToken) {",
          "    pm.request.headers.add({",
          "        key: 'X-CSRF-Token',",
          "        value: csrfToken",
          "    });",
          "}",
          "",
          "// Add security headers",
          "pm.request.headers.add({",
          "    key: 'X-Requested-With',",
          "    value: 'XMLHttpRequest'",
          "});",
          "",
          "// Log request for debugging",
          "console.log('Making request to:', pm.request.url.toString());"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Global test script",
          "pm.test('Response time is less than 2000ms', function () {",
          "    pm.expect(pm.response.responseTime).to.be.below(2000);",
          "});",
          "",
          "pm.test('Response has success field', function () {",
          "    const jsonData = pm.response.json();",
          "    pm.expect(jsonData).to.have.property('success');",
          "});",
          "",
          "// Extract CSRF token from response headers if available",
          "const csrfHeader = pm.response.headers.get('X-CSRF-Token');",
          "if (csrfHeader) {",
          "    pm.environment.set('csrf_token', csrfHeader);",
          "}",
          "",
          "// Log response for debugging",
          "console.log('Response status:', pm.response.status);",
          "console.log('Response body:', pm.response.text());"
        ]
      }
    }
  ]
}
