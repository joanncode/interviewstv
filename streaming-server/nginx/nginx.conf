# NGINX Configuration for Interviews.tv Load Balancing and RTMP
worker_processes auto;
worker_rlimit_nofile 65535;

events {
    worker_connections 4096;
    use epoll;
    multi_accept on;
}

# RTMP Configuration for Live Streaming
rtmp {
    server {
        listen 1935;
        chunk_size 4096;
        allow publish all;
        allow play all;

        application live {
            live on;
            record off;
            
            # Enable HLS
            hls on;
            hls_path /var/www/hls;
            hls_fragment 3;
            hls_playlist_length 60;
            
            # Enable DASH
            dash on;
            dash_path /var/www/dash;
            dash_fragment 3;
            dash_playlist_length 60;
            
            # Authentication
            on_publish http://streaming-server-1:8081/api/streams/auth;
            on_publish_done http://streaming-server-1:8081/api/streams/publish-done;
            
            # Recording
            record all;
            record_path /var/recordings;
            record_unique on;
            record_suffix .flv;
            
            # Transcoding for multiple qualities
            exec ffmpeg -i rtmp://localhost/live/$name
                -c:v libx264 -c:a aac -b:v 256k -b:a 32k -vf "scale=480:270" -tune zerolatency -preset superfast -crf 28 -f flv rtmp://localhost/live/$name_low
                -c:v libx264 -c:a aac -b:v 768k -b:a 96k -vf "scale=854:480" -tune zerolatency -preset superfast -crf 25 -f flv rtmp://localhost/live/$name_mid
                -c:v libx264 -c:a aac -b:v 1024k -b:a 128k -vf "scale=1280:720" -tune zerolatency -preset superfast -crf 23 -f flv rtmp://localhost/live/$name_high
                -c copy -f flv rtmp://localhost/live/$name_src;
        }
        
        application playback {
            live on;
            play /var/recordings;
        }
    }
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    
    # Logging
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for" '
                    'rt=$request_time uct="$upstream_connect_time" '
                    'uht="$upstream_header_time" urt="$upstream_response_time"';
    
    access_log /var/log/nginx/access.log main;
    error_log /var/log/nginx/error.log warn;
    
    # Basic Settings
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    client_max_body_size 100M;
    
    # Gzip Compression
    gzip on;
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        image/svg+xml;
    
    # Rate Limiting
    limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=login:10m rate=1r/s;
    limit_req_zone $binary_remote_addr zone=upload:10m rate=1r/m;
    
    # Connection Limiting
    limit_conn_zone $binary_remote_addr zone=conn_limit_per_ip:10m;
    limit_conn conn_limit_per_ip 20;
    
    # Upstream servers for load balancing
    upstream streaming_backend {
        least_conn;
        server streaming-server-1:8081 max_fails=3 fail_timeout=30s;
        server streaming-server-2:8082 max_fails=3 fail_timeout=30s;
        server streaming-server-3:8083 max_fails=3 fail_timeout=30s;
        
        # Health checks
        keepalive 32;
    }
    
    upstream hls_backend {
        least_conn;
        server streaming-server-1:8080 max_fails=3 fail_timeout=30s;
        server streaming-server-2:8081 max_fails=3 fail_timeout=30s;
        server streaming-server-3:8082 max_fails=3 fail_timeout=30s;
    }
    
    # SSL Configuration
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384;
    ssl_prefer_server_ciphers off;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;
    
    # Security Headers
    add_header X-Frame-Options DENY;
    add_header X-Content-Type-Options nosniff;
    add_header X-XSS-Protection "1; mode=block";
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin";
    
    # Main Server Block
    server {
        listen 80;
        listen [::]:80;
        server_name interviews.tv www.interviews.tv;
        
        # Redirect HTTP to HTTPS
        return 301 https://$server_name$request_uri;
    }
    
    server {
        listen 443 ssl http2;
        listen [::]:443 ssl http2;
        server_name interviews.tv www.interviews.tv;
        
        # SSL Certificates
        ssl_certificate /etc/nginx/ssl/interviews.tv.crt;
        ssl_certificate_key /etc/nginx/ssl/interviews.tv.key;
        
        # API Routes with Load Balancing
        location /api/ {
            limit_req zone=api burst=20 nodelay;
            
            proxy_pass http://streaming_backend;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_cache_bypass $http_upgrade;
            proxy_read_timeout 86400;
        }
        
        # WebSocket for real-time features
        location /socket.io/ {
            proxy_pass http://streaming_backend;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        
        # HLS Streaming
        location /hls/ {
            add_header Cache-Control no-cache;
            add_header Access-Control-Allow-Origin *;
            add_header Access-Control-Allow-Methods GET;
            
            proxy_pass http://hls_backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }
        
        # Static file serving with caching
        location /static/ {
            alias /var/www/static/;
            expires 1y;
            add_header Cache-Control "public, immutable";
            gzip_static on;
        }
        
        # Media files
        location /media/ {
            alias /var/www/media/;
            expires 1d;
            add_header Cache-Control "public";
        }
        
        # Login rate limiting
        location /api/auth/login {
            limit_req zone=login burst=5 nodelay;
            proxy_pass http://streaming_backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        
        # Upload rate limiting
        location /api/upload/ {
            limit_req zone=upload burst=3 nodelay;
            client_max_body_size 500M;
            proxy_pass http://streaming_backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_read_timeout 300;
            proxy_send_timeout 300;
        }
        
        # Health check endpoint
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }
        
        # Default location for frontend
        location / {
            try_files $uri $uri/ /index.html;
            root /var/www/html;
            index index.html;
            
            # Cache static assets
            location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
                expires 1y;
                add_header Cache-Control "public, immutable";
            }
        }
        
        # Security: Block access to sensitive files
        location ~ /\. {
            deny all;
            access_log off;
            log_not_found off;
        }
        
        location ~ ~$ {
            deny all;
            access_log off;
            log_not_found off;
        }
    }
    
    # Monitoring endpoints
    server {
        listen 8080;
        server_name localhost;
        
        location /nginx_status {
            stub_status on;
            access_log off;
            allow 127.0.0.1;
            allow 172.20.0.0/16;
            deny all;
        }
        
        location /health {
            access_log off;
            return 200 "nginx healthy\n";
            add_header Content-Type text/plain;
        }
    }
}
